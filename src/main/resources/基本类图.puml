@startuml
'https://plantuml.com/class-diagram

title 关联关系

' 关联关系分为一般关联关系、 聚合关系 、 组合关系
' 一般关联关系分为单向关联、双向关联、 自关联


'-----------------------
'单向关联，实心箭头指向被关联类，通过成员变量实现

class Customer{
  - Address address

}
class Address
Customer --> Address : 单向关联

'----------------------
' 双向关联用一个不带箭头的直线表示，通过类中的成员变量实现

class Customer1{
    - List<Product> products
}
class Product
Customer1 -- Product : 双向关联

'-----------------------
'单向关联 自己关联自己

Class Node{
    - Node subNode
}

Node --> Node : 自关联

'-----------------------
' 聚合关系是一种强关联关系，是整体与部分关系，不同生命周期，各部分可脱离整体独立存在
Class University{
    - List<Teacher> teas
}

Class Teacher

University o-- Teacher : 聚合关系

'----------------------
' 组合关系是一种更强烈的聚合关系，是整体与部分的关系，同生命周期，部分不能脱离整体独立存在
Class Head{
    - Mouth mouth

}
Class Mouth{
    + void eat()
}

Head *-- Mouth : 组合关系

'-----------------------
' 依赖关系是一种使用关系，它是对象之间耦合度最弱的一种关联方式，是临时的关联，在代码中，某个为的方法通过局部变量，方法的参数，或对静态方法的调用来访问被依赖类中的方法完成一些职责
class Driver{
    - String name
    + void drive(Car car)
}
note ”public void drive(Car car){\ncar.move(); // 汽车移动\n}“ as N1

Driver .. N1
class Car{
    + void move()
}

Driver ..> Car : 依赖关系

'----------------------
'继承关系是对象间耦合度最大的一中关系，表示一般与特殊的关系，是父子关系
class Person{
    - String name
    - int age
    + void speak()
}

class Student{
    - String studentNo
    + void study()
}

class Teacher1{
    - String teachNo
    + void teach()
}

Person <|-- Student : 继承关系
Person <|-- Teacher1 : 继承关系

'---------------------
'实现关系是接口与实现类之间的关系
interface Vehicle{
    + void move()
}
class Car1{
    + void move()
}
class Ship{
    + void move()
}

Vehicle <|.. Car1 : 实现关系
Vehicle <|.. Ship : 实现关系

@enduml